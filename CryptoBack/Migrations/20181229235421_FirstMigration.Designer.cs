// <auto-generated />
using System;
using CryptoBack.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoBack.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20181229235421_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("CryptoBack.Models.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CategoryId");

                    b.Property<Guid>("CorrelationUid");

                    b.Property<byte[]>("Text");

                    b.Property<byte[]>("Title");

                    b.Property<long>("UserId");

                    b.Property<DateTime>("VersionDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("CryptoBack.Models.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ArticleId");

                    b.Property<long?>("CommentId");

                    b.Property<byte[]>("Data");

                    b.Property<byte[]>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("CryptoBack.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CategoryId");

                    b.Property<byte[]>("Name")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CryptoBack.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ArticleId");

                    b.Property<long?>("CommentId");

                    b.Property<Guid>("CorrelationUid");

                    b.Property<byte[]>("Text");

                    b.Property<long>("UserId");

                    b.Property<DateTime>("VersionDate");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CryptoBack.Models.Reaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ArticleId");

                    b.Property<long?>("CommentId");

                    b.Property<byte[]>("ReactionType");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("CryptoBack.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Location");

                    b.Property<DateTime?>("LogInDate");

                    b.Property<byte[]>("Name")
                        .IsRequired();

                    b.Property<byte[]>("Password")
                        .IsRequired();

                    b.Property<TimeSpan>("SessionLifetime");

                    b.Property<DateTime>("SignInDate");

                    b.Property<Guid?>("Token");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CryptoBack.Models.Article", b =>
                {
                    b.HasOne("CryptoBack.Models.Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoBack.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoBack.Models.Attachment", b =>
                {
                    b.HasOne("CryptoBack.Models.Article", "Article")
                        .WithMany("Attachments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("CryptoBack.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");
                });

            modelBuilder.Entity("CryptoBack.Models.Category", b =>
                {
                    b.HasOne("CryptoBack.Models.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("CategoryId");

                    b.HasOne("CryptoBack.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoBack.Models.Comment", b =>
                {
                    b.HasOne("CryptoBack.Models.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("CryptoBack.Models.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("CommentId");

                    b.HasOne("CryptoBack.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoBack.Models.Reaction", b =>
                {
                    b.HasOne("CryptoBack.Models.Article", "Article")
                        .WithMany("Reactions")
                        .HasForeignKey("ArticleId");

                    b.HasOne("CryptoBack.Models.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId");

                    b.HasOne("CryptoBack.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
